{"version":3,"sources":["timepicker/Panel.js"],"names":["cx","TimePickerPanel","props","onModeChange","bind","onTimeChange","state","time","mode","componentWillReceiveProps","nextProps","setState","shouldComponentUpdate","nextState","isSame","isModeChange","onChange","render","build","displayName","defaultProps","millisecond","seconds","toDate","propTypes","instanceOf","Date","oneOf","begin","end","format","string","func","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAaA,QAAMA,KAAK,uBAAO,iBAAP,CAAX;;QAEqBC,e;;;AAEjB,iCAAYC,KAAZ,EAAmB;AAAA;;AAAA,qEAEf,sBAAMA,KAAN,CAFe;;AAIf,kBAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,OAApB;AACA,kBAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,OAApB;;AAEA,kBAAKE,KAAL,GAAa;AACTC,sBAAML,MAAMK,IADH;AAETC,sBAAMN,MAAMM;AAFH,aAAb;AAPe;AAWlB;;kCAEDC,yB,sCAA0BC,S,EAAW;;AAEjC,gBAAMH,OAAOG,UAAUH,IAAvB;;AAEA,gBAAI,KAAKL,KAAL,CAAWK,IAAX,KAAoBA,IAAxB,EAA8B;AAC1B,qBAAKI,QAAL,CAAc,EAACJ,UAAD,EAAd;AACH;AACJ,S;;kCAEDK,qB,kCAAsBF,S,EAAWG,S,EAAW;AACxC,mBAAO,CAAC,yBAAOA,UAAUN,IAAjB,EAAuBO,MAAvB,CAA8B,KAAKR,KAAL,CAAWC,IAAzC,EAA+C,QAA/C,CAAD,IACAM,UAAUL,IAAV,KAAmB,KAAKF,KAAL,CAAWE,IADrC;AAEH,S;;kCAEDL,Y,+BAAqB;AAAA,gBAAPK,IAAO,QAAPA,IAAO;;AACjB,iBAAKG,QAAL,CAAc,EAACH,UAAD,EAAd;AACH,S;;kCAEDH,Y,gCAA2C;AAAA;;AAAA,gBAA7BE,IAA6B,SAA7BA,IAA6B;AAAA,2CAAvBQ,YAAuB;AAAA,gBAAvBA,YAAuB,sCAAR,KAAQ;;;AAEvC,gBAAIF,YAAY,EAACN,UAAD,EAAhB;;AAEA,gBAAI,KAAKL,KAAL,CAAWM,IAAX,KAAoB,MAApB,IAA8BO,YAAlC,EAAgD;AAC5CF,0BAAUL,IAAV,GAAiB,QAAjB;AACH;;AAED,iBAAKG,QAAL,CAAcE,SAAd,EAAyB,YAAM;AAC3B,uBAAKX,KAAL,CAAWc,QAAX,CAAoB,EAACT,UAAD,EAApB;AACH,aAFD;AAGH,S;;kCAEDU,M,qBAAS;AAAA,yBAKD,KAAKX,KALJ;AAAA,gBAGDC,IAHC,UAGDA,IAHC;AAAA,gBAIDC,IAJC,UAIDA,IAJC;;;AAOL,mBACI;AAAA;AAAA,kBAAK,WAAWR,GAAG,KAAKE,KAAR,EAAegB,KAAf,EAAhB;AACI;AACI,0BAAMX,IADV;AAEI,0BAAMC,IAFV;AAGI,kCAAc,KAAKL,YAHvB;AAII,8BAAU,KAAKE,YAJnB,GADJ;AAMI;AACI,0BAAME,IADV;AAEI,0BAAMC,IAFV;AAGI,8BAAU,KAAKH,YAHnB;AANJ,aADJ;AAcH,S;;;;;yBAnEgBJ,e;;;AAuErBA,oBAAgBkB,WAAhB,GAA8B,iBAA9B;;AAEAlB,oBAAgBmB,YAAhB,GAA+B;AAC3Bb,cAAM,2BAASc,WAAT,CAAqB,CAArB,EAAwBC,OAAxB,CAAgC,CAAhC,EAAmCC,MAAnC,EADqB;AAE3Bf,cAAM;AAFqB,KAA/B;;AAKAP,oBAAgBuB,SAAhB,GAA4B;AACxBjB,cAAM,iBAAUkB,UAAV,CAAqBC,IAArB,CADkB;AAExBlB,cAAM,iBAAUmB,KAAV,CAAgB,CAAC,MAAD,EAAS,QAAT,CAAhB,CAFkB;AAGxBC,eAAO,iBAAUH,UAAV,CAAqBC,IAArB,CAHiB;AAIxBG,aAAK,iBAAUJ,UAAV,CAAqBC,IAArB,CAJmB;AAKxBI,gBAAQ,iBAAUC,MALM;AAMxBf,kBAAU,iBAAUgB,IAAV,CAAeC;AAND,KAA5B","file":"Panel.js","sourcesContent":["/**\n * @file melon/TimePickerPanel\n * @author cxtom(cxtom2008@qq.com)\n */\n\nimport React, {Component, PropTypes} from 'react';\nimport moment from 'moment';\n\nimport {create} from 'melon-core/classname/cxBuilder';\n\nimport Header from './Header';\nimport Clock from './Clock';\n\nconst cx = create('TimePickerPanel');\n\nexport default class TimePickerPanel extends Component {\n\n    constructor(props) {\n\n        super(props);\n\n        this.onModeChange = this.onModeChange.bind(this);\n        this.onTimeChange = this.onTimeChange.bind(this);\n\n        this.state = {\n            time: props.time,\n            mode: props.mode\n        };\n    }\n\n    componentWillReceiveProps(nextProps) {\n\n        const time = nextProps.time;\n\n        if (this.props.time !== time) {\n            this.setState({time});\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return !moment(nextState.time).isSame(this.state.time, 'minute')\n            || nextState.mode !== this.state.mode;\n    }\n\n    onModeChange({mode}) {\n        this.setState({mode});\n    }\n\n    onTimeChange({time, isModeChange = false}) {\n\n        let nextState = {time};\n\n        if (this.props.mode === 'hour' && isModeChange) {\n            nextState.mode = 'minute';\n        }\n\n        this.setState(nextState, () => {\n            this.props.onChange({time});\n        });\n    }\n\n    render() {\n\n        const {\n            time,\n            mode\n        } = this.state;\n\n        return (\n            <div className={cx(this.props).build()}>\n                <Header\n                    time={time}\n                    mode={mode}\n                    onModeChange={this.onModeChange}\n                    onChange={this.onTimeChange} />\n                <Clock\n                    time={time}\n                    mode={mode}\n                    onChange={this.onTimeChange} />\n            </div>\n        );\n\n    }\n\n}\n\nTimePickerPanel.displayName = 'TimePickerPanel';\n\nTimePickerPanel.defaultProps = {\n    time: moment().millisecond(0).seconds(0).toDate(),\n    mode: 'hour'\n};\n\nTimePickerPanel.propTypes = {\n    time: PropTypes.instanceOf(Date),\n    mode: PropTypes.oneOf(['hour', 'minute']),\n    begin: PropTypes.instanceOf(Date),\n    end: PropTypes.instanceOf(Date),\n    format: PropTypes.string,\n    onChange: PropTypes.func.isRequired\n};\n"]}